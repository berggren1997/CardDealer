@inject ICardService _cardService;


@if (_deckOfCards == null)
{
    <h1>Loading...</h1>
}
else
{
    <div>
        <h1>Cards in deck: @_deckOfCards.Count</h1>
        <button class="btn btn-primary" style="margin-bottom: 25px;" @onclick="DrawCards"
            disabled="@cardsDrawn">
            deal cards
        </button>
    </div>

    @if (cardHandDto.CardHand.Count > 0)
    {
        <div class="row">
            @foreach (var card in cardHandDto?.CardHand)
            {
                <CardItem CardDto="card"
              OnSwitch="() => SwitchCard(card.Id)" />
            }
            <button style="margin-top: 55px; margin-left: 37em; width: 300px; height: 70px;"
            class="btn btn-primary" disabled="@errors" @onclick="() => SubmitCards(cardHandDto)">
                Save hand
            </button>
        </div>
        @if (errors)
        {
            <h2>@errorText</h2>
        }
    }

}


@code {

    Stack<CardDto>? _deckOfCards { get; set; }
    CardHandDto cardHandDto = new();

    const int cardHandMaxValue = 5;
    bool cardsDrawn;
    bool errors;
    string errorText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _deckOfCards = await _cardService.GetDeckOfCards();
    }

    private async Task SubmitCards(CardHandDto cardHand)
    {
        var isCardsSaved = await _cardService.SaveCardHand(cardHand);

        if (!isCardsSaved)
        {
            errors = true;
            errorText = "There was a problem saving the changes to the database";
        }
    }

    private void SwitchCard(Guid cardId)
    {
        if (cardHandDto.CardHand.Count > 0)
        {
            cardHandDto.CardHand = cardHandDto.CardHand.Where(x => x.Id != cardId).ToList();
            cardHandDto.CardHand.Add(_deckOfCards.Pop());
            StateHasChanged();
        }
    }

    private void DrawCards()
    {
        for (int i = 0; i < cardHandMaxValue; i++)
        {
            cardHandDto.CardHand.Add(_deckOfCards.Pop());
        }
        cardsDrawn = !cardsDrawn;
    }
}